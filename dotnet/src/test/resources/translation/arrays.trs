---exe
arrays.exe
---translation
meta translator_mark "jump to methods"
dup
push "ctor"
eq
jumpi @method_ctor
push "init"
sexist
jumpi @methods
push "Program was not initialized"
throw
@methods:
dup
push "WorkWithArrays"
eq
jumpi @method_WorkWithArrays
dup
push "WorkWithBytes"
eq
jumpi @method_WorkWithBytes
push "Wrong method name"
throw
meta translator_mark "WorkWithArrays method"
meta method {
"name":"WorkWithArrays","returnTpe":int8(0)
}
@method_WorkWithArrays:
meta translator_mark "WorkWithArrays local vars definition"
push null
push null
push null
push null
push null
push null
meta translator_mark "WorkWithArrays method body"
new int16[97, 98, 99]
push int32(7)
swapn
pop
new int32[1, 2, 3]
push int32(6)
swapn
pop
new number[1.0, 2.0, 3.0]
push int32(5)
swapn
pop
push int32(3)
push int8(11)
new_array
dup
push int32(0)
push "abc"
swap
array_mut
dup
push int32(1)
push "def"
swap
array_mut
dup
push int32(2)
push "rty"
swap
array_mut
push int32(4)
swapn
pop
new int32[4, 5, 6]
push int32(3)
swapn
pop
push int32(6)
dupn
push int32(1)
push int32(100)
swap
array_mut
push int32(5)
dupn
push int32(1)
push int32(4)
swap
array_mut
push int32(4)
dupn
push int32(1)
push number(4.0)
swap
array_mut
push int32(3)
dupn
push int32(1)
push "asdf"
swap
array_mut
push int32(2)
dupn
push int32(1)
push int32(7)
swap
array_mut
push int32(3)
dupn
length
push int8(3)
cast
push int32(2)
swapn
pop
jump @WorkWithArrays_lvc
meta translator_mark "WorkWithArrays local vars clearing"
@WorkWithArrays_lvc:
pop
pop
pop
pop
pop
pop
pop
meta translator_mark "end of WorkWithArrays method"
jump @stop
meta translator_mark "WorkWithBytes method"
meta method {
"name":"WorkWithBytes","returnTpe":int8(0)
}
@method_WorkWithBytes:
meta translator_mark "WorkWithBytes local vars definition"
push null
push null
push null
push null
push null
push null
push null
push null
push null
push null
meta translator_mark "WorkWithBytes method body"
new int8[1, 2, 3]
push int32(11)
swapn
pop
new int8[4, 5, 6]
call @array_to_bytes
push int32(10)
swapn
pop
new int8[7, 8, 9]
call @array_to_bytes
push int32(9)
swapn
pop
push int32(10)
dupn
push int32(0)
array_get
push int32(8)
swapn
pop
push int32(10)
dupn
push int32(2)
array_get
push int32(7)
swapn
pop
push int32(9)
dupn
push int32(1)
array_get
push int32(6)
swapn
pop
push int32(8)
dupn
push int32(1)
array_get
push int32(5)
swapn
pop
push int32(9)
dupn
push int32(1)
push int32(2)
push int32(2)
dupn
add
swap
slice
push int32(4)
swapn
pop
push x6279746573
push int32(10)
dupn
push int32(10)
dupn
push int32(2)
dupn
push int8(14)
cast
push int32(4)
dupn
concat
sput
pop
pop
push x6279746573
new int8[8, 9, 10]
call @array_to_bytes
push int8(14)
cast
swap
concat
sexist
push int8(3)
cast
push int32(2)
swapn
pop
push int32(1)
dupn
push int8(9)
cast
not
push int8(3)
cast
push int32(1)
eq
jumpi @WorkWithBytes_br192
push x6279746573
push int32(10)
dupn
new int8[7, 8, 9]
call @array_to_bytes
push int32(2)
dupn
push int8(14)
cast
push int32(4)
dupn
concat
sput
pop
pop
@WorkWithBytes_br192:
push int32(10)
dupn
push int32(0)
push int32(2)
swap
array_mut
push int32(10)
dupn
push int32(1)
push int32(1)
swap
array_mut
push int32(9)
dupn
length
push int32(3)
swapn
pop
jump @WorkWithBytes_lvc
meta translator_mark "WorkWithBytes local vars clearing"
@WorkWithBytes_lvc:
pop
pop
pop
pop
pop
pop
pop
pop
pop
pop
pop
meta translator_mark "end of WorkWithBytes method"
jump @stop
meta translator_mark "ctor method"
meta method {
"name":"ctor","returnTpe":int8(0)
}
@method_ctor:
meta translator_mark "ctor check"
from
paddr
owner
eq
jumpi @ctor_ok_1
push "Only owner can call the constructor"
throw
@ctor_ok_1:
push "init"
sexist
not
jumpi @ctor_ok_2
push "Program has been already initialized"
throw
@ctor_ok_2:
push null
push "init"
sput
meta translator_mark "ctor local vars definition"
meta translator_mark "ctor method body"
jump @ctor_lvc
meta translator_mark "ctor local vars clearing"
@ctor_lvc:
pop
meta translator_mark "end of ctor method"
jump @stop
meta translator_mark "helper functions"
@array_to_bytes:
dup
length
push x
push int32(0)
@array_to_bytes_loop:
push int32(4)
dupn
push int32(2)
dupn
array_get
push int8(14)
cast
push int32(3)
dupn
concat
push int32(3)
swapn
pop
push int32(1)
add
dup
push int32(4)
dupn
gt
jumpi @array_to_bytes_loop
pop
swap
pop
swap
pop
ret
@stop: